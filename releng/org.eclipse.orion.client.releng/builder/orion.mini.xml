<project name="WebIDERequireJS customTargets overrides" >
	<!--
	Required properties
	======================================================================
		${builder}           Path to the org.eclipse.orion.client/releng/builder/ folder
		${requireJsHome}     Path to the folder where r.js can be found. Must also contain a ./lib/ 
		                       subfolder containing jars for Closure and Rhino.
		${buildConfig}       Path to the RequireJS build config file for the product (eg. orion.build.js).
		${buildDirectory}    Path to the directory where build will be performed.

	Optional properties
	======================================================================
		${skipOrionUI}      If set, the Orion pages and plugins will not be built
		${skipBrowser}      If set, the readonly file browser widget will not be generated 
		${skipEditor}       If set, the standalone editor will not be generated
	-->

	<property name="super" value="Build specific targets and properties" />
	<property name="widgetOutDirectory" value="${buildDirectory}/built-js" />
	<property name="staging" value="${buildDirectory}/staging" />
	<property name="optimized" value="${buildDirectory}/optimized" />

    <target name="download3rdPartyLibs">
        <mkdir dir="${requirejsHome}" />
        <get src="http://requirejs.org/docs/release/2.1.6/r.js"
             dest="${requirejsHome}/r.js"
             usetimestamp="true"
             maxtime="30" />
    </target>

	<target name="updateBuildLabel" if="buildLabel">
	    <echo message="Updating build label..."/>
		<replace dir="${buildDirectory}" includes="pluginVersions.properties,featureVersions.properties"  >
			<replacefilter token="HEAD" value="${buildLabel}" />
			<replacefilter token="origin/mls -alaster" value="${buildLabel}" />
		</replace>
		<!-- Build Id in Orion page footer -->
		<replace dir="${buildDirectory}" includes="**/web/orion/nls/root/messages.js"  >
			<replacefilter token="@buildLabel@" value="${buildLabel}" />
		</replace>
	</target>

	<scriptdef name="finishBuiltModules" language="javascript" src="${builder}/scripts/finishModules.js">
		<attribute name="buildfile" />
		<attribute name="out" />
		<attribute name="bundles" />
	</scriptdef>

	<scriptdef name="stageBundles" language="javascript" src="${builder}/scripts/stageBundles.js">
		<attribute name="buildfile" />
		<attribute name="todir" />
	</scriptdef>

	<macrodef name="finishModule">
		<attribute name="out" />
		<attribute name="bundles" />
		<attribute name="name" />
		<attribute name="bundle" />
		<attribute name="pagedir" />
		<sequential>
			<echo message="Finishing module @{pageDir}/@{name}, bundle: @{bundle}..." />
			
			<!-- copy @{name} to built-@{name}.js -->
			<copy tofile="@{out}/@{pagedir}/built-@{name}.js">
				<fileset file="@{out}/@{pagedir}/@{name}.js">
					<size when="more" value="0" />
				</fileset>
			</copy>

			<antcall target="updateHTML">
				<param name="htmlFile" value="@{out}/@{pagedir}/@{name}.html" />
				<param name="minifiedScript" value="@{out}/@{pagedir}/built-@{name}.js" />
				<param name="pageDir" value="@{pagedir}" />
				<param name="name" value="@{name}" />
			</antcall>

			<!-- Rewrite the module name to built-@{name} -->
			<antcall target="updateJS">
				<param name="minifiedScript" value="@{out}/@{pagedir}/built-@{name}.js" />
				<param name="pageDir" value="@{pagedir}" />
				<param name="name" value="@{name}" />
			</antcall>
		
			<!-- Copy JS and HTML files back -->
			<copy todir="@{bundle}/web/@{pagedir}" >
				<fileset dir="@{out}/@{pagedir}" includes="built-@{name}.js, @{name}.html" >
					<size when="more" value="0" />
				</fileset>
			</copy>
		</sequential>
	</macrodef>
	
	<target name="orionOptimize" unless="skipOrionUI">
		<!-- $staging: Input folder for r.js -->
		<!-- $out:     Output folder of r.js -->
		<!-- $buildfile: r.js build config -->
		<sequential>
			<echo message="Building Orion pages and plugins..."/>
			<java classname="org.mozilla.javascript.tools.shell.Main" fork="true" dir="${staging}">
				<classpath>
					<sort>
						<fileset dir="${requirejsHome}/lib/">
							<include name="**/*.jar"/>
						</fileset>
					</sort>
				</classpath>
				<jvmarg value="-Xss1024k" />
				<arg value="-version" />
				<arg value="180" />
				<arg value="${requirejsHome}/r.js"/>
				<arg value="-o" />
				<arg value="${buildfile}"/>
				<!-- <arg value="optimize=closure" /> -->
				<arg value="appDir=${staging}" />
				<arg value="baseUrl=./" />
				<arg value="dir=${out}" />
			</java>

			<finishBuiltModules buildfile="${buildfile}" out="${out}" bundles="${buildDirectory}/bundles" />
		</sequential>
	</target>

	<target name="widget.check">
		<condition property="widget.run">
			<or>
				<not><isset property="skipBrowser" /></not>
				<not><isset property="skipEditor" /></not>
			</or>
		</condition>
	</target>

	<!-- Clean widget output directory -->
	<target name="widgetClean" depends="widget.check" if="widget.run">
		<delete dir="${widgetOutDirectory}" />
		<mkdir dir="${widgetOutDirectory}" />

		<!--
			Copy editor build files to ${staging} to make editorOptimize simpler. cssIn paths must be 
			relative to the build file location, and having build file location == ${staging} is easier.
		-->
		<copy file="${builder}/scripts/editor.build-css.js" tofile="${staging}/editor.build-css.js" overwrite="true"/>
		<copy file="${builder}/scripts/editor.build-js.js" tofile="${staging}/editor.build-js.js" overwrite="true"/>
		<copy file="${builder}/scripts/editor.build.almond-js.js" tofile="${staging}/editor.build.almond-js.js" overwrite="true"/>
		<copy file="${builder}/scripts/browse.build-css.js" tofile="${staging}/browse.build-css.js" overwrite="true"/>
		<copy file="${builder}/scripts/browse.build.almond-js.js" tofile="${staging}/browse.build.almond-js.js" overwrite="true"/>
	</target>

	<target name="editorOptimize" unless="skipEditor">
		<sequential>
			<widgetOptimizeFile out="${out}/built-editor.css"
				buildfile="${staging}/editor.build-css.js"
				optimize="closure"
				staging="${staging}" />
			<widgetOptimizeFile out="${out}/built-editor-amd.min.js"
				buildfile="${staging}/editor.build-js.js"
				optimize="closure"
				staging="${staging}" />
			<widgetOptimizeFile out="${out}/built-editor-amd.js"
				buildfile="${staging}/editor.build-js.js"
				optimize="none"
				staging="${staging}" />
			<widgetOptimizeFile out="${out}/built-editor.min.js"
				buildfile="${staging}/editor.build.almond-js.js"
				optimize="closure"
				staging="${staging}" />
			<widgetOptimizeFile out="${out}/built-editor.js"
				buildfile="${staging}/editor.build.almond-js.js"
				optimize="none"
				staging="${staging}" />
		</sequential>
	</target>

	<target name="browserOptimize" unless="skipBrowser">
		<sequential>
			<widgetOptimizeFile out="${out}/built-browser.css"
				buildfile="${staging}/browse.build-css.js"
				optimize="closure"
				staging="${staging}" />
			<widgetOptimizeFile out="${out}/built-browser.min.js"
				buildfile="${staging}/browse.build.almond-js.js"
				optimize="closure"
				staging="${staging}" />
			<widgetOptimizeFile out="${out}/built-browser.js"
				buildfile="${staging}/browse.build.almond-js.js"
				optimize="none"
				staging="${staging}" />
			<copy todir="${buildDirectory}/bundles/org.eclipse.orion.client.ui/web/browse/built" >
				<fileset dir="${out}" includes="built-browser.js, built-browser.css, built-browser.min.js"/>
			</copy>
		</sequential>
	</target>
	
	<macrodef name="widgetOptimizeFile">
		<attribute name="staging" />
		<attribute name="buildfile" />
		<attribute name="out" />
		<attribute name="optimize" />
		<sequential>
			<java classname="org.mozilla.javascript.tools.shell.Main" fork="true" dir="@{staging}">
				<classpath>
					<sort>
						<fileset dir="${requirejsHome}/lib/">
							<include name="**/*.jar"/>
						</fileset>
					</sort>
				</classpath>
				<!-- JavaScript language version -->
				<arg value="-version" />
				<arg value="180" />
				<arg value="${requirejsHome}/r.js"/>
				<arg value="-o" />
				<arg value="@{buildfile}"/>
				<arg value="optimize=@{optimize}" />
				<arg value="out=@{out}"/>
				<arg value="dir=" />
			</java>
		</sequential>
	</macrodef>

	<target name="checkHTMLExists">
		<available file="${htmlFile}" property="htmlFileExists"/>
	</target>
		
	
	<target name="updateHTML" depends="checkHTMLExists" if="htmlFileExists">
		<echo message="updateHTML for ${htmlFile}..." />
		<condition property="builtResult" value="built-${name}" else="${name}" >
			<length file="${minifiedScript}" when="greater" length="0" />
		</condition>
		<replace file="${htmlFile}" token="require([&quot;${name}.js&quot;]);" value="require([&quot;${builtResult}.js&quot;]);" />
		<replace file="${htmlFile}" token="require([&apos;${name}.js&apos;]);" value="require([&quot;${builtResult}.js&quot;]);" />
		<replace file="${htmlFile}" token="requirejs/require.js" value="requirejs/require.min.js" />
		<replace file="${htmlFile}" token="data-main=&quot;${name}.js&quot;" value="data-main=&quot;${builtResult}.js&quot;" />
		<replace file="${htmlFile}" token="data-main=&apos;${name}.js&apos;" value="data-main=&quot;${builtResult}.js&quot;" />
	</target>

	<target name="checkBuiltResult">
		<condition property="builtResultExists" value="1" >
			<length file="${minifiedScript}" when="greater" length="0" />
		</condition>
	</target>

	<!-- https://bugs.eclipse.org/bugs/show_bug.cgi?id=404957 -->
	<target name="updateJS" depends="checkBuiltResult" if="builtResultExists">
		<!-- Omit superfluous prefix "./" if we're dealing with module in the cwd -->
		<condition property="moduleName" value="${name}" else="${pageDir}/${name}">
			<equals arg1="${pageDir}" arg2="." />
		</condition>
		<property name="builtModuleName" value="built-${name}.js" />

		<replace file="${minifiedScript}" value="define(&apos;${builtModuleName}&apos;">
			<replacefilter token="define(&quot;${moduleName}&quot;" />
			<replacefilter token="define(&apos;${moduleName}&apos;" />
		</replace>
	</target>

	<!-- These 3 tasks are just for conditionally removing existing ${staging} and ${optimized} -->
	<target name="checkDirs">
		<available file="${staging}"   type="dir" property="staging.exists" />
		<available file="${optimized}" type="dir" property="optimized.exists" />
	</target>
	<target name="cleanStaging" if="staging.exists">
		<echo message="Removing ${staging}" />
		<delete>
			<fileset dir="${staging}" />
		</delete>
	</target>
	<target name="cleanOptimized" if="optimized.exists">
		<echo message="Removing ${optimized}" />
		<delete>
			<fileset dir="${optimized}" />
		</delete>
	</target>

	<target name="requirejs" depends="checkDirs, cleanStaging, cleanOptimized">
	    <echo message="requirejs build started..."/>

		<mkdir dir="${staging}" />
		<mkdir dir="${optimized}" />
		<antcall target="widgetClean">
			<param name="staging" value="${staging}" />
		</antcall>

		<!-- Stage files for optimization -->
		<stageBundles todir="${staging}" buildfile="${buildConfig}" />

		<!-- build Orion pages and plugins (unless skipOrionUI is set) -->
		<antcall target="orionOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${optimized}" />
			<param name="buildfile" value="${buildConfig}" />
		</antcall>

		<!-- build readonly widget (unless skipBrowser is set) -->
		<antcall target="browserOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${widgetOutDirectory}" />
		</antcall>

		<!-- build standalone editor (unless skipEditor is set) -->
		<antcall target="editorOptimize">
			<param name="staging" value="${staging}" />
			<param name="out" value="${widgetOutDirectory}" />
		</antcall>

		<!-- copy css back -->
		<!-- TODO! this should be done automatically using the ${buildConfig} -->
		<copy todir="${buildDirectory}/bundles/org.eclipse.orion.client.ui/web" >
			<fileset dir="${optimized}" includes="**/*.css" excludes="git/,profile/"/>
		</copy>
		<copy todir="${buildDirectory}/bundles/org.eclipse.orion.client.git/web" >
			<fileset dir="${optimized}" includes="git/**/*.css" />
		</copy>
		<copy todir="${buildDirectory}/bundles/org.eclipse.orion.client.users/web" >
			<fileset dir="${optimized}" includes="profile/**/*.css" />
		</copy>
	</target>

</project>
